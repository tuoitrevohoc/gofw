type Viewer {
  profile: User! @goField(forceResolver: true)
  userId: ID
  isAuthenticated: Boolean!
}

type AccessToken {
  accessToken: String!
  expiry: Int!
  viewer: Viewer!
}

input SignUpInput {
  email: String!
  password: String!
}

input SignInInput {
  email: String!
  password: String!
}

type AuthnRegistrationResponse {
  credentialCreation: String!
}

type AuthnLoginResponse {
  credentialRequest: String!
}

extend type Query {
  viewer: Viewer!
}

extend type Mutation {
  signUp(input: SignUpInput!): AccessToken!
  signIn(input: SignInInput!): AccessToken!

  beginAuthnRegistration(email: String!): AuthnRegistrationResponse!
  finishAuthnRegistration(email: String!, response: String!): AccessToken!

  beginAuthnLogin(email: String!): AuthnLoginResponse!
  finishAuthnLogin(email: String!, response: String!): AccessToken!
}
