package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"errors"

	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/restaurant"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/user"
	graphql1 "github.com/tuoitrevohoc/gofw/backend/gen/go/graphql"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/graphql/model"
	"github.com/tuoitrevohoc/gofw/backend/internal/auth"
)

// SaveRestaurant is the resolver for the saveRestaurant field.
func (r *mutationResolver) SaveRestaurant(ctx context.Context, input model.SaveRestaurantInput) (*ent.Restaurant, error) {
	viewer := auth.ViewerFromContext(ctx)

	if viewer == nil {
		return nil, errors.New("unauthorized")
	}

	if input.ID == nil {
		return r.client.Restaurant.Create().
			SetName(input.Name).
			SetAddress(input.Address).
			SetOwnerID(viewer.UserID.Id()).
			Save(ctx)
	}

	rest, err := r.client.Restaurant.Get(ctx, input.ID.Id())
	if err != nil {
		return nil, err
	}

	_, err = r.client.Restaurant.Update().
		Where(restaurant.ID(input.ID.Id()), restaurant.HasOwnerWith(user.ID(viewer.UserID.Id()))).
		SetName(input.Name).
		SetAddress(input.Address).
		Save(ctx)

	if err != nil {
		return nil, err
	}

	return rest, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
