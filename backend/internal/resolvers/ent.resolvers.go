package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"

	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/credential"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/refreshtoken"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/restaurant"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/user"
	graphql1 "github.com/tuoitrevohoc/gofw/backend/gen/go/graphql"
	"github.com/tuoitrevohoc/gofw/backend/internal/scalars"
)

// ID is the resolver for the id field.
func (r *credentialResolver) ID(ctx context.Context, obj *ent.Credential) (*scalars.GUID, error) {
	return scalars.NewGUID(string(credential.Table), obj.ID), nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id scalars.GUID) (ent.Noder, error) {
	return r.client.Noder(ctx, id.Id(), ent.WithFixedNodeType(id.NodeType()))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []*scalars.GUID) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// ID is the resolver for the id field.
func (r *refreshTokenResolver) ID(ctx context.Context, obj *ent.RefreshToken) (*scalars.GUID, error) {
	return scalars.NewGUID(string(refreshtoken.Table), obj.ID), nil
}

// ID is the resolver for the id field.
func (r *restaurantResolver) ID(ctx context.Context, obj *ent.Restaurant) (*scalars.GUID, error) {
	return scalars.NewGUID(string(restaurant.Table), obj.ID), nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *ent.User) (*scalars.GUID, error) {
	return scalars.NewGUID(string(user.Table), obj.ID), nil
}

// Credential returns graphql1.CredentialResolver implementation.
func (r *Resolver) Credential() graphql1.CredentialResolver { return &credentialResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

// RefreshToken returns graphql1.RefreshTokenResolver implementation.
func (r *Resolver) RefreshToken() graphql1.RefreshTokenResolver { return &refreshTokenResolver{r} }

// Restaurant returns graphql1.RestaurantResolver implementation.
func (r *Resolver) Restaurant() graphql1.RestaurantResolver { return &restaurantResolver{r} }

// User returns graphql1.UserResolver implementation.
func (r *Resolver) User() graphql1.UserResolver { return &userResolver{r} }

type credentialResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type refreshTokenResolver struct{ *Resolver }
type restaurantResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
