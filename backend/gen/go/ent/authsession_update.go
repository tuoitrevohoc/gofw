// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/authsession"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/predicate"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/user"
)

// AuthSessionUpdate is the builder for updating AuthSession entities.
type AuthSessionUpdate struct {
	config
	hooks    []Hook
	mutation *AuthSessionMutation
}

// Where appends a list predicates to the AuthSessionUpdate builder.
func (asu *AuthSessionUpdate) Where(ps ...predicate.AuthSession) *AuthSessionUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetData sets the "data" field.
func (asu *AuthSessionUpdate) SetData(s string) *AuthSessionUpdate {
	asu.mutation.SetData(s)
	return asu
}

// SetNillableData sets the "data" field if the given value is not nil.
func (asu *AuthSessionUpdate) SetNillableData(s *string) *AuthSessionUpdate {
	if s != nil {
		asu.SetData(*s)
	}
	return asu
}

// SetUserID sets the "user_id" field.
func (asu *AuthSessionUpdate) SetUserID(i int) *AuthSessionUpdate {
	asu.mutation.SetUserID(i)
	return asu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (asu *AuthSessionUpdate) SetNillableUserID(i *int) *AuthSessionUpdate {
	if i != nil {
		asu.SetUserID(*i)
	}
	return asu
}

// ClearUserID clears the value of the "user_id" field.
func (asu *AuthSessionUpdate) ClearUserID() *AuthSessionUpdate {
	asu.mutation.ClearUserID()
	return asu
}

// SetUser sets the "user" edge to the User entity.
func (asu *AuthSessionUpdate) SetUser(u *User) *AuthSessionUpdate {
	return asu.SetUserID(u.ID)
}

// Mutation returns the AuthSessionMutation object of the builder.
func (asu *AuthSessionUpdate) Mutation() *AuthSessionMutation {
	return asu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (asu *AuthSessionUpdate) ClearUser() *AuthSessionUpdate {
	asu.mutation.ClearUser()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AuthSessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AuthSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AuthSessionUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AuthSessionUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AuthSessionUpdate) check() error {
	if v, ok := asu.mutation.Data(); ok {
		if err := authsession.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf(`ent: validator failed for field "AuthSession.data": %w`, err)}
		}
	}
	return nil
}

func (asu *AuthSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(authsession.Table, authsession.Columns, sqlgraph.NewFieldSpec(authsession.FieldID, field.TypeInt))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.Data(); ok {
		_spec.SetField(authsession.FieldData, field.TypeString, value)
	}
	if asu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authsession.UserTable,
			Columns: []string{authsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authsession.UserTable,
			Columns: []string{authsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AuthSessionUpdateOne is the builder for updating a single AuthSession entity.
type AuthSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthSessionMutation
}

// SetData sets the "data" field.
func (asuo *AuthSessionUpdateOne) SetData(s string) *AuthSessionUpdateOne {
	asuo.mutation.SetData(s)
	return asuo
}

// SetNillableData sets the "data" field if the given value is not nil.
func (asuo *AuthSessionUpdateOne) SetNillableData(s *string) *AuthSessionUpdateOne {
	if s != nil {
		asuo.SetData(*s)
	}
	return asuo
}

// SetUserID sets the "user_id" field.
func (asuo *AuthSessionUpdateOne) SetUserID(i int) *AuthSessionUpdateOne {
	asuo.mutation.SetUserID(i)
	return asuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (asuo *AuthSessionUpdateOne) SetNillableUserID(i *int) *AuthSessionUpdateOne {
	if i != nil {
		asuo.SetUserID(*i)
	}
	return asuo
}

// ClearUserID clears the value of the "user_id" field.
func (asuo *AuthSessionUpdateOne) ClearUserID() *AuthSessionUpdateOne {
	asuo.mutation.ClearUserID()
	return asuo
}

// SetUser sets the "user" edge to the User entity.
func (asuo *AuthSessionUpdateOne) SetUser(u *User) *AuthSessionUpdateOne {
	return asuo.SetUserID(u.ID)
}

// Mutation returns the AuthSessionMutation object of the builder.
func (asuo *AuthSessionUpdateOne) Mutation() *AuthSessionMutation {
	return asuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (asuo *AuthSessionUpdateOne) ClearUser() *AuthSessionUpdateOne {
	asuo.mutation.ClearUser()
	return asuo
}

// Where appends a list predicates to the AuthSessionUpdate builder.
func (asuo *AuthSessionUpdateOne) Where(ps ...predicate.AuthSession) *AuthSessionUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AuthSessionUpdateOne) Select(field string, fields ...string) *AuthSessionUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AuthSession entity.
func (asuo *AuthSessionUpdateOne) Save(ctx context.Context) (*AuthSession, error) {
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AuthSessionUpdateOne) SaveX(ctx context.Context) *AuthSession {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AuthSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AuthSessionUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AuthSessionUpdateOne) check() error {
	if v, ok := asuo.mutation.Data(); ok {
		if err := authsession.DataValidator(v); err != nil {
			return &ValidationError{Name: "data", err: fmt.Errorf(`ent: validator failed for field "AuthSession.data": %w`, err)}
		}
	}
	return nil
}

func (asuo *AuthSessionUpdateOne) sqlSave(ctx context.Context) (_node *AuthSession, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(authsession.Table, authsession.Columns, sqlgraph.NewFieldSpec(authsession.FieldID, field.TypeInt))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authsession.FieldID)
		for _, f := range fields {
			if !authsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.Data(); ok {
		_spec.SetField(authsession.FieldData, field.TypeString, value)
	}
	if asuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authsession.UserTable,
			Columns: []string{authsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authsession.UserTable,
			Columns: []string{authsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuthSession{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
