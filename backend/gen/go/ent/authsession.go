// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/authsession"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/user"
)

// AuthSession is the model entity for the AuthSession schema.
type AuthSession struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Data holds the value of the "data" field.
	Data string `json:"data,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthSessionQuery when eager-loading is set.
	Edges        AuthSessionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AuthSessionEdges holds the relations/edges for other nodes in the graph.
type AuthSessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthSessionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authsession.FieldID, authsession.FieldUserID:
			values[i] = new(sql.NullInt64)
		case authsession.FieldData:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthSession fields.
func (as *AuthSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authsession.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case authsession.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				as.Data = value.String
			}
		case authsession.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				as.UserID = int(value.Int64)
			}
		default:
			as.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthSession.
// This includes values selected through modifiers, order, etc.
func (as *AuthSession) Value(name string) (ent.Value, error) {
	return as.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the AuthSession entity.
func (as *AuthSession) QueryUser() *UserQuery {
	return NewAuthSessionClient(as.config).QueryUser(as)
}

// Update returns a builder for updating this AuthSession.
// Note that you need to call AuthSession.Unwrap() before calling this method if this AuthSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AuthSession) Update() *AuthSessionUpdateOne {
	return NewAuthSessionClient(as.config).UpdateOne(as)
}

// Unwrap unwraps the AuthSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AuthSession) Unwrap() *AuthSession {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthSession is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AuthSession) String() string {
	var builder strings.Builder
	builder.WriteString("AuthSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("data=")
	builder.WriteString(as.Data)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", as.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// AuthSessions is a parsable slice of AuthSession.
type AuthSessions []*AuthSession
