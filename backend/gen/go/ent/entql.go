// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/authsession"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/credential"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/predicate"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/refreshtoken"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 4)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   authsession.Table,
			Columns: authsession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authsession.FieldID,
			},
		},
		Type: "AuthSession",
		Fields: map[string]*sqlgraph.FieldSpec{
			authsession.FieldData:   {Type: field.TypeString, Column: authsession.FieldData},
			authsession.FieldUserID: {Type: field.TypeInt, Column: authsession.FieldUserID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   credential.Table,
			Columns: credential.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: credential.FieldID,
			},
		},
		Type: "Credential",
		Fields: map[string]*sqlgraph.FieldSpec{
			credential.FieldPublicKey: {Type: field.TypeString, Column: credential.FieldPublicKey},
			credential.FieldData:      {Type: field.TypeString, Column: credential.FieldData},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   refreshtoken.Table,
			Columns: refreshtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: refreshtoken.FieldID,
			},
		},
		Type: "RefreshToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			refreshtoken.FieldToken:     {Type: field.TypeString, Column: refreshtoken.FieldToken},
			refreshtoken.FieldCreatedAt: {Type: field.TypeTime, Column: refreshtoken.FieldCreatedAt},
			refreshtoken.FieldRefreshAt: {Type: field.TypeTime, Column: refreshtoken.FieldRefreshAt},
			refreshtoken.FieldExpireAt:  {Type: field.TypeTime, Column: refreshtoken.FieldExpireAt},
			refreshtoken.FieldIPAddress: {Type: field.TypeString, Column: refreshtoken.FieldIPAddress},
			refreshtoken.FieldUserAgent: {Type: field.TypeString, Column: refreshtoken.FieldUserAgent},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldName:                 {Type: field.TypeString, Column: user.FieldName},
			user.FieldEmail:                {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldPassword:             {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldAvatar:               {Type: field.TypeString, Column: user.FieldAvatar},
			user.FieldFinishedRegistration: {Type: field.TypeBool, Column: user.FieldFinishedRegistration},
			user.FieldLastSignInAt:         {Type: field.TypeTime, Column: user.FieldLastSignInAt},
		},
	}
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authsession.UserTable,
			Columns: []string{authsession.UserColumn},
			Bidi:    false,
		},
		"AuthSession",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.UserTable,
			Columns: []string{credential.UserColumn},
			Bidi:    false,
		},
		"Credential",
		"User",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   refreshtoken.UserTable,
			Columns: []string{refreshtoken.UserColumn},
			Bidi:    false,
		},
		"RefreshToken",
		"User",
	)
	graph.MustAddE(
		"auth_sessions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.AuthSessionsTable,
			Columns: []string{user.AuthSessionsColumn},
			Bidi:    false,
		},
		"User",
		"AuthSession",
	)
	graph.MustAddE(
		"credentials",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CredentialsTable,
			Columns: []string{user.CredentialsColumn},
			Bidi:    false,
		},
		"User",
		"Credential",
	)
	graph.MustAddE(
		"access_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.AccessTokensTable,
			Columns: []string{user.AccessTokensColumn},
			Bidi:    false,
		},
		"User",
		"RefreshToken",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (asq *AuthSessionQuery) addPredicate(pred func(s *sql.Selector)) {
	asq.predicates = append(asq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AuthSessionQuery builder.
func (asq *AuthSessionQuery) Filter() *AuthSessionFilter {
	return &AuthSessionFilter{config: asq.config, predicateAdder: asq}
}

// addPredicate implements the predicateAdder interface.
func (m *AuthSessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AuthSessionMutation builder.
func (m *AuthSessionMutation) Filter() *AuthSessionFilter {
	return &AuthSessionFilter{config: m.config, predicateAdder: m}
}

// AuthSessionFilter provides a generic filtering capability at runtime for AuthSessionQuery.
type AuthSessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AuthSessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *AuthSessionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(authsession.FieldID))
}

// WhereData applies the entql string predicate on the data field.
func (f *AuthSessionFilter) WhereData(p entql.StringP) {
	f.Where(p.Field(authsession.FieldData))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *AuthSessionFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(authsession.FieldUserID))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *AuthSessionFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *AuthSessionFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CredentialQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CredentialQuery builder.
func (cq *CredentialQuery) Filter() *CredentialFilter {
	return &CredentialFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CredentialMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CredentialMutation builder.
func (m *CredentialMutation) Filter() *CredentialFilter {
	return &CredentialFilter{config: m.config, predicateAdder: m}
}

// CredentialFilter provides a generic filtering capability at runtime for CredentialQuery.
type CredentialFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CredentialFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CredentialFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(credential.FieldID))
}

// WherePublicKey applies the entql string predicate on the public_key field.
func (f *CredentialFilter) WherePublicKey(p entql.StringP) {
	f.Where(p.Field(credential.FieldPublicKey))
}

// WhereData applies the entql string predicate on the data field.
func (f *CredentialFilter) WhereData(p entql.StringP) {
	f.Where(p.Field(credential.FieldData))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *CredentialFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *CredentialFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rtq *RefreshTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	rtq.predicates = append(rtq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RefreshTokenQuery builder.
func (rtq *RefreshTokenQuery) Filter() *RefreshTokenFilter {
	return &RefreshTokenFilter{config: rtq.config, predicateAdder: rtq}
}

// addPredicate implements the predicateAdder interface.
func (m *RefreshTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RefreshTokenMutation builder.
func (m *RefreshTokenMutation) Filter() *RefreshTokenFilter {
	return &RefreshTokenFilter{config: m.config, predicateAdder: m}
}

// RefreshTokenFilter provides a generic filtering capability at runtime for RefreshTokenQuery.
type RefreshTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RefreshTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RefreshTokenFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(refreshtoken.FieldID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *RefreshTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(refreshtoken.FieldToken))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RefreshTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(refreshtoken.FieldCreatedAt))
}

// WhereRefreshAt applies the entql time.Time predicate on the refresh_at field.
func (f *RefreshTokenFilter) WhereRefreshAt(p entql.TimeP) {
	f.Where(p.Field(refreshtoken.FieldRefreshAt))
}

// WhereExpireAt applies the entql time.Time predicate on the expire_at field.
func (f *RefreshTokenFilter) WhereExpireAt(p entql.TimeP) {
	f.Where(p.Field(refreshtoken.FieldExpireAt))
}

// WhereIPAddress applies the entql string predicate on the ip_address field.
func (f *RefreshTokenFilter) WhereIPAddress(p entql.StringP) {
	f.Where(p.Field(refreshtoken.FieldIPAddress))
}

// WhereUserAgent applies the entql string predicate on the user_agent field.
func (f *RefreshTokenFilter) WhereUserAgent(p entql.StringP) {
	f.Where(p.Field(refreshtoken.FieldUserAgent))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *RefreshTokenFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *RefreshTokenFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *UserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(user.FieldName))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *UserFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatar))
}

// WhereFinishedRegistration applies the entql bool predicate on the finished_registration field.
func (f *UserFilter) WhereFinishedRegistration(p entql.BoolP) {
	f.Where(p.Field(user.FieldFinishedRegistration))
}

// WhereLastSignInAt applies the entql time.Time predicate on the last_sign_in_at field.
func (f *UserFilter) WhereLastSignInAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastSignInAt))
}

// WhereHasAuthSessions applies a predicate to check if query has an edge auth_sessions.
func (f *UserFilter) WhereHasAuthSessions() {
	f.Where(entql.HasEdge("auth_sessions"))
}

// WhereHasAuthSessionsWith applies a predicate to check if query has an edge auth_sessions with a given conditions (other predicates).
func (f *UserFilter) WhereHasAuthSessionsWith(preds ...predicate.AuthSession) {
	f.Where(entql.HasEdgeWith("auth_sessions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCredentials applies a predicate to check if query has an edge credentials.
func (f *UserFilter) WhereHasCredentials() {
	f.Where(entql.HasEdge("credentials"))
}

// WhereHasCredentialsWith applies a predicate to check if query has an edge credentials with a given conditions (other predicates).
func (f *UserFilter) WhereHasCredentialsWith(preds ...predicate.Credential) {
	f.Where(entql.HasEdgeWith("credentials", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAccessTokens applies a predicate to check if query has an edge access_tokens.
func (f *UserFilter) WhereHasAccessTokens() {
	f.Where(entql.HasEdge("access_tokens"))
}

// WhereHasAccessTokensWith applies a predicate to check if query has an edge access_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasAccessTokensWith(preds ...predicate.RefreshToken) {
	f.Where(entql.HasEdgeWith("access_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
