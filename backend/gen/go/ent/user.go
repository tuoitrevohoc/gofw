// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Avatar holds the value of the "avatar" field.
	Avatar string `json:"avatar,omitempty"`
	// FinishedRegistration holds the value of the "finished_registration" field.
	FinishedRegistration bool `json:"finished_registration,omitempty"`
	// LastSignInAt holds the value of the "last_sign_in_at" field.
	LastSignInAt time.Time `json:"last_sign_in_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Credentials holds the value of the credentials edge.
	Credentials []*Credential `json:"credentials,omitempty"`
	// AccessTokens holds the value of the access_tokens edge.
	AccessTokens []*RefreshToken `json:"access_tokens,omitempty"`
	// Restaurants holds the value of the restaurants edge.
	Restaurants []*Restaurant `json:"restaurants,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedCredentials  map[string][]*Credential
	namedAccessTokens map[string][]*RefreshToken
	namedRestaurants  map[string][]*Restaurant
}

// CredentialsOrErr returns the Credentials value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CredentialsOrErr() ([]*Credential, error) {
	if e.loadedTypes[0] {
		return e.Credentials, nil
	}
	return nil, &NotLoadedError{edge: "credentials"}
}

// AccessTokensOrErr returns the AccessTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AccessTokensOrErr() ([]*RefreshToken, error) {
	if e.loadedTypes[1] {
		return e.AccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "access_tokens"}
}

// RestaurantsOrErr returns the Restaurants value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RestaurantsOrErr() ([]*Restaurant, error) {
	if e.loadedTypes[2] {
		return e.Restaurants, nil
	}
	return nil, &NotLoadedError{edge: "restaurants"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldFinishedRegistration:
			values[i] = new(sql.NullBool)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldEmail, user.FieldPassword, user.FieldAvatar:
			values[i] = new(sql.NullString)
		case user.FieldLastSignInAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				u.Avatar = value.String
			}
		case user.FieldFinishedRegistration:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field finished_registration", values[i])
			} else if value.Valid {
				u.FinishedRegistration = value.Bool
			}
		case user.FieldLastSignInAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_sign_in_at", values[i])
			} else if value.Valid {
				u.LastSignInAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryCredentials queries the "credentials" edge of the User entity.
func (u *User) QueryCredentials() *CredentialQuery {
	return NewUserClient(u.config).QueryCredentials(u)
}

// QueryAccessTokens queries the "access_tokens" edge of the User entity.
func (u *User) QueryAccessTokens() *RefreshTokenQuery {
	return NewUserClient(u.config).QueryAccessTokens(u)
}

// QueryRestaurants queries the "restaurants" edge of the User entity.
func (u *User) QueryRestaurants() *RestaurantQuery {
	return NewUserClient(u.config).QueryRestaurants(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(u.Avatar)
	builder.WriteString(", ")
	builder.WriteString("finished_registration=")
	builder.WriteString(fmt.Sprintf("%v", u.FinishedRegistration))
	builder.WriteString(", ")
	builder.WriteString("last_sign_in_at=")
	builder.WriteString(u.LastSignInAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedCredentials returns the Credentials named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedCredentials(name string) ([]*Credential, error) {
	if u.Edges.namedCredentials == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedCredentials[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedCredentials(name string, edges ...*Credential) {
	if u.Edges.namedCredentials == nil {
		u.Edges.namedCredentials = make(map[string][]*Credential)
	}
	if len(edges) == 0 {
		u.Edges.namedCredentials[name] = []*Credential{}
	} else {
		u.Edges.namedCredentials[name] = append(u.Edges.namedCredentials[name], edges...)
	}
}

// NamedAccessTokens returns the AccessTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedAccessTokens(name string) ([]*RefreshToken, error) {
	if u.Edges.namedAccessTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedAccessTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedAccessTokens(name string, edges ...*RefreshToken) {
	if u.Edges.namedAccessTokens == nil {
		u.Edges.namedAccessTokens = make(map[string][]*RefreshToken)
	}
	if len(edges) == 0 {
		u.Edges.namedAccessTokens[name] = []*RefreshToken{}
	} else {
		u.Edges.namedAccessTokens[name] = append(u.Edges.namedAccessTokens[name], edges...)
	}
}

// NamedRestaurants returns the Restaurants named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedRestaurants(name string) ([]*Restaurant, error) {
	if u.Edges.namedRestaurants == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedRestaurants[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedRestaurants(name string, edges ...*Restaurant) {
	if u.Edges.namedRestaurants == nil {
		u.Edges.namedRestaurants = make(map[string][]*Restaurant)
	}
	if len(edges) == 0 {
		u.Edges.namedRestaurants[name] = []*Restaurant{}
	} else {
		u.Edges.namedRestaurants[name] = append(u.Edges.namedRestaurants[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
