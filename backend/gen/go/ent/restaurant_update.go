// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/predicate"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/restaurant"
	"github.com/tuoitrevohoc/gofw/backend/gen/go/ent/user"
)

// RestaurantUpdate is the builder for updating Restaurant entities.
type RestaurantUpdate struct {
	config
	hooks    []Hook
	mutation *RestaurantMutation
}

// Where appends a list predicates to the RestaurantUpdate builder.
func (ru *RestaurantUpdate) Where(ps ...predicate.Restaurant) *RestaurantUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetName sets the "name" field.
func (ru *RestaurantUpdate) SetName(s string) *RestaurantUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableName(s *string) *RestaurantUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetAddress sets the "address" field.
func (ru *RestaurantUpdate) SetAddress(s string) *RestaurantUpdate {
	ru.mutation.SetAddress(s)
	return ru
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableAddress(s *string) *RestaurantUpdate {
	if s != nil {
		ru.SetAddress(*s)
	}
	return ru
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ru *RestaurantUpdate) SetOwnerID(id int) *RestaurantUpdate {
	ru.mutation.SetOwnerID(id)
	return ru
}

// SetOwner sets the "owner" edge to the User entity.
func (ru *RestaurantUpdate) SetOwner(u *User) *RestaurantUpdate {
	return ru.SetOwnerID(u.ID)
}

// Mutation returns the RestaurantMutation object of the builder.
func (ru *RestaurantUpdate) Mutation() *RestaurantMutation {
	return ru.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ru *RestaurantUpdate) ClearOwner() *RestaurantUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RestaurantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RestaurantUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RestaurantUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RestaurantUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RestaurantUpdate) check() error {
	if ru.mutation.OwnerCleared() && len(ru.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Restaurant.owner"`)
	}
	return nil
}

func (ru *RestaurantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(restaurant.Table, restaurant.Columns, sqlgraph.NewFieldSpec(restaurant.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(restaurant.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Address(); ok {
		_spec.SetField(restaurant.FieldAddress, field.TypeString, value)
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaurant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RestaurantUpdateOne is the builder for updating a single Restaurant entity.
type RestaurantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RestaurantMutation
}

// SetName sets the "name" field.
func (ruo *RestaurantUpdateOne) SetName(s string) *RestaurantUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableName(s *string) *RestaurantUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetAddress sets the "address" field.
func (ruo *RestaurantUpdateOne) SetAddress(s string) *RestaurantUpdateOne {
	ruo.mutation.SetAddress(s)
	return ruo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableAddress(s *string) *RestaurantUpdateOne {
	if s != nil {
		ruo.SetAddress(*s)
	}
	return ruo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ruo *RestaurantUpdateOne) SetOwnerID(id int) *RestaurantUpdateOne {
	ruo.mutation.SetOwnerID(id)
	return ruo
}

// SetOwner sets the "owner" edge to the User entity.
func (ruo *RestaurantUpdateOne) SetOwner(u *User) *RestaurantUpdateOne {
	return ruo.SetOwnerID(u.ID)
}

// Mutation returns the RestaurantMutation object of the builder.
func (ruo *RestaurantUpdateOne) Mutation() *RestaurantMutation {
	return ruo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ruo *RestaurantUpdateOne) ClearOwner() *RestaurantUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// Where appends a list predicates to the RestaurantUpdate builder.
func (ruo *RestaurantUpdateOne) Where(ps ...predicate.Restaurant) *RestaurantUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RestaurantUpdateOne) Select(field string, fields ...string) *RestaurantUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Restaurant entity.
func (ruo *RestaurantUpdateOne) Save(ctx context.Context) (*Restaurant, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RestaurantUpdateOne) SaveX(ctx context.Context) *Restaurant {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RestaurantUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RestaurantUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RestaurantUpdateOne) check() error {
	if ruo.mutation.OwnerCleared() && len(ruo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Restaurant.owner"`)
	}
	return nil
}

func (ruo *RestaurantUpdateOne) sqlSave(ctx context.Context) (_node *Restaurant, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(restaurant.Table, restaurant.Columns, sqlgraph.NewFieldSpec(restaurant.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Restaurant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, restaurant.FieldID)
		for _, f := range fields {
			if !restaurant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != restaurant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(restaurant.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Address(); ok {
		_spec.SetField(restaurant.FieldAddress, field.TypeString, value)
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Restaurant{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaurant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
