---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/controller-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: reactjs-app-nginx-ingress-controller
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: controller
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: reactjs-app
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: controller
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8443
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/default-backend-networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: reactjs-app-nginx-ingress-controller-default-backend
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: default-backend
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: reactjs-app
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: default-backend
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/controller-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reactjs-app-nginx-ingress-controller
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: controller
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: reactjs-app
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: controller
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/default-backend-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reactjs-app-nginx-ingress-controller-default-backend
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: default-backend
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: reactjs-app
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: default-backend
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reactjs-app-nginx-ingress-controller
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
automountServiceAccountToken: false
---
# Source: reactjs-app/templates/serviceaccount.tpl
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reactjs-sa
  namespace: frontend
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: reactjs-app
    helm.sh/chart: reactjs-app-0.1.0
automountServiceAccountToken: true
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: reactjs-app-nginx-ingress-controller
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: controller
data:
  allow-snippet-annotations: "false"
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/default-backend-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: reactjs-app-nginx-ingress-controller-default-backend
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: default-backend
data:
  defaultBackend.conf: |-
    location /healthz {
      return 200;
    }
    
    location / {
      return 404;
    }
---
# Source: reactjs-app/templates/configmap.tpl
apiVersion: v1
kind: ConfigMap
metadata:
  name: reactjs-app-nginx-default-conf
data:
  health-check.conf: |
    server {

       listen       9090;
       listen  [::]:9090;

       location /readiness {
           access_log off;
           add_header 'Content-Type' 'application/json';
           return 200 '{"status":"Ready"}';
       }
       location /liveness {
           access_log off;
           add_header 'Content-Type' 'application/json';
           return 200 '{"status":"Live"}';
       }
    }
  default.conf: |
    server {
        listen 8080 default_server;
        listen [::]:8080 default_server;

        #access_log  /var/log/nginx/host.access.log  main;

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: reactjs-app-nginx-ingress-controller
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
      - get
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: reactjs-app-nginx-ingress-controller
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: reactjs-app-nginx-ingress-controller
subjects:
  - kind: ServiceAccount
    name: reactjs-app-nginx-ingress-controller
    namespace: "frontend"
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: reactjs-app-nginx-ingress-controller
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch
      - get
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: reactjs-app-nginx-ingress-controller
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: reactjs-app-nginx-ingress-controller
subjects:
  - kind: ServiceAccount
    name: reactjs-app-nginx-ingress-controller
    namespace: "frontend"
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: reactjs-app-nginx-ingress-controller
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: controller
spec:
  type: LoadBalancer
  sessionAffinity: None
  externalTrafficPolicy: ""
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/component: controller
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/default-backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: reactjs-app-nginx-ingress-controller-default-backend
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: default-backend
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/component: default-backend
---
# Source: reactjs-app/templates/service.tpl
apiVersion: v1
kind: Service
metadata:
  name: reactjs-app
  namespace: frontend
  labels:
    app.kubernetes.io/name: reactjs-app
    helm.sh/chart: reactjs-app-0.1.0
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080 # Default to named port 'http' from deployment
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: reactjs-app
    app.kubernetes.io/instance: reactjs-app
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reactjs-app-nginx-ingress-controller
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: reactjs-app
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: reactjs-app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nginx-ingress-controller
        app.kubernetes.io/version: 1.12.2
        helm.sh/chart: nginx-ingress-controller-11.6.18
        app.kubernetes.io/component: controller
    spec:
      
      dnsPolicy: ClusterFirst
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: reactjs-app
                    app.kubernetes.io/name: nginx-ingress-controller
                    app.kubernetes.io/component: controller
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      serviceAccountName: reactjs-app-nginx-ingress-controller
      terminationGracePeriodSeconds: 60
      initContainers:
        - name: prepare-nginx-folder
          image: docker.io/bitnami/nginx-ingress-controller:1.12.2-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash
              cp -r /etc/nginx/* /nginx
              cp -r /etc/ingress-controller/* /ingress-controller
          volumeMounts:
            - name: empty-dir
              mountPath: /nginx
              subPath: app-nginx-dir
            - name: empty-dir
              mountPath: /ingress-controller
              subPath: app-controller-dir
      containers:
        - name: controller
          image: docker.io/bitnami/nginx-ingress-controller:1.12.2-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - --default-backend-service=$(POD_NAMESPACE)/reactjs-app-nginx-ingress-controller-default-backend
            - --http-port=8080
            - --https-port=8443
            - --default-server-port=8181
            - --healthz-port=10254
            - --profiler-port=10245
            - --status-port=10246
            - --stream-port=10247
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx
            - --configmap=$(POD_NAMESPACE)/reactjs-app-nginx-ingress-controller
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            tcpSocket:
              port: metrics
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: default-server
              containerPort: 8181
              protocol: TCP
            - name: metrics
              containerPort: 10254
              protocol: TCP
            - name: profiler
              containerPort: 10245
              protocol: TCP
            - name: status
              containerPort: 10246
              protocol: TCP
            - name: stream
              containerPort: 10247
              protocol: TCP
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /etc/nginx
              subPath: app-nginx-dir
            - name: empty-dir
              mountPath: /etc/ingress-controller
              subPath: app-controller-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /tmp/nginx
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /etc/ingress-controller/telemetry
              subPath: app-telemetry-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/default-backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reactjs-app-nginx-ingress-controller-default-backend
  namespace: "frontend"
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.28.0
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: default-backend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: reactjs-app
      app.kubernetes.io/name: nginx-ingress-controller
      app.kubernetes.io/component: default-backend
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: reactjs-app
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nginx-ingress-controller
        app.kubernetes.io/version: 1.28.0
        helm.sh/chart: nginx-ingress-controller-11.6.18
        app.kubernetes.io/component: default-backend
    spec:
      
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: reactjs-app
                    app.kubernetes.io/name: nginx-ingress-controller
                    app.kubernetes.io/component: default-backend
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: reactjs-app-nginx-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
        - name: default-backend
          image: docker.io/bitnami/nginx:1.28.0-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
          env:
          envFrom:
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 0
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /healthz
              port: http
              scheme: HTTP
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/nginx/tmp
              subPath: app-tmp-dir
            - name: nginx-config-volume
              mountPath: /opt/bitnami/nginx/conf/bitnami/defaultBackend.conf
              subPath: defaultBackend.conf
              readOnly: true
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: nginx-config-volume
          configMap:
            name: reactjs-app-nginx-ingress-controller-default-backend
            items:
              - key: defaultBackend.conf
                path: defaultBackend.conf
---
# Source: reactjs-app/templates/deployment.tpl
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reactjs-app
  namespace: frontend
  labels:
    app.kubernetes.io/name: reactjs-app
    helm.sh/chart: reactjs-app-0.1.0
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: reactjs-app
      app.kubernetes.io/instance: reactjs-app
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: reactjs-app
        app.kubernetes.io/instance: reactjs-app
    spec:
      serviceAccountName: reactjs-sa
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        supplementalGroups: []
        sysctls: []
      containers:
        - name: reactjs-app
          image: "docker.io/gofw/reactjs-app:0.1.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          ports:
            - name: healthcheck
              containerPort: 9090
              protocol: TCP
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /liveness
              port: healthcheck
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: healthcheck
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
      volumes: 
        - name: reactjs-app-nginx-default-config-volume
          configMap:
            name: reactjs-app-nginx-default-conf
            items:
              - key: default.conf
                path: default.conf
              - key: health-check.conf
                path: health-check.conf
---
# Source: reactjs-app/charts/nginx-ingress-controller/templates/ingressclass.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: nginx
  labels:
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx-ingress-controller
    app.kubernetes.io/version: 1.12.2
    helm.sh/chart: nginx-ingress-controller-11.6.18
    app.kubernetes.io/component: controller
spec:
  controller: k8s.io/ingress-nginx
---
# Source: reactjs-app/templates/ingress.tpl
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: reactjs-app
  namespace: frontend
  labels:
    app.kubernetes.io/name: reactjs-app
    helm.sh/chart: reactjs-app-0.1.0
    app.kubernetes.io/instance: reactjs-app
    app.kubernetes.io/managed-by: Helm
spec:
  ingressClassName: nginx
  rules:
    - host: "reactjs-app.local"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: reactjs-app # This should match your service name
                port:
                  number: 80 # This should match your service port
