"""
The @defer directive may be specified on a fragment spread to imply
de-prioritization, that causes the fragment to be omitted in the initial
response, and delivered as a subsequent response afterward. A query with @defer
directive will cause the request to potentially return multiple responses, where
non-deferred data is delivered in the initial response and data deferred
delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

"""
The `@oneOf` _built-in directive_ is used within the type system definition
language to indicate an Input Object is a OneOf Input Object.
"""
directive @oneOf on INPUT_OBJECT

"""
The @specifiedBy built-in directive is used within the type system definition
language to provide a scalar specification URL for specifying the behavior of
custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR

type AccessToken {
  accessToken: String!
  expiry: Int!
  viewer: Viewer!
}

type AuthnLoginResponse {
  credentialRequest: String!
}

type AuthnRegistrationResponse {
  credentialCreation: String!
}

type Credential implements Node {
  id: ID!
  publicKey: String!
  data: String!
  user: User!
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

type Mutation {
  saveRestaurant(input: SaveRestaurantInput!): Restaurant!
  signUp(input: SignUpInput!): AccessToken!
  signIn(input: SignInInput!): AccessToken!
  beginAuthnRegistration(email: String!): AuthnRegistrationResponse!
  finishAuthnRegistration(email: String!, response: String!): AccessToken!
  beginAuthnLogin: AuthnLoginResponse!
  finishAuthnLogin(response: String!): AccessToken!
  signOut: Boolean!
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC

  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  viewer: Viewer!
}

type RefreshToken implements Node {
  id: ID!
  token: String!
  createdAt: Time!
  refreshAt: Time!
  expireAt: Time!
  ipAddress: String!
  isActive: Boolean!
  userAgent: String!
  user: User!
}

type Restaurant implements Node {
  id: ID!
  name: String!
  address: String!
  owner: User!
}

input SaveRestaurantInput {
  id: ID
  name: String!
  address: String!
}

input SignInInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
}

"""The builtin Time type"""
scalar Time

type User implements Node {
  id: ID!
  name: String
  email: String!
  password: String
  avatar: String
  finishedRegistration: Boolean!
  lastSignInAt: Time
  credentials: [Credential!]
  accessTokens: [RefreshToken!]
  restaurants: [Restaurant!]
}

type Viewer {
  profile: User!
  userId: ID
  isAuthenticated: Boolean!
  sessionId: Int
}

